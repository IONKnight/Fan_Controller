
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000114  000001a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000114  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001a8  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000874  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00000900  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000435  00000000  00000000  00000980  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000162  00000000  00000000  00000db5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000036c  00000000  00000000  00000f17  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001284  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000133  00000000  00000000  000012b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000048  00000000  00000000  000013eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  7c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  80:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  84:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  88:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e1       	ldi	r30, 0x14	; 20
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	1b be       	out	0x3b, r1	; 59

000000b4 <__do_clear_bss>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	a1 30       	cpi	r26, 0x01	; 1
  c0:	b1 07       	cpc	r27, r17
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
  c4:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  c8:	0c 94 88 00 	jmp	0x110	; 0x110 <_exit>

000000cc <__bad_interrupt>:
  cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <pwm_init>:
// initialize PWM
void pwm_init()
{
	// initialize timer0 in PWM mode
	//TCCR0B |= (1<<CS00);
	TCCR0A |= (1<<COM0A0)|(1<<WGM00)|(1<<WGM01);
  d0:	84 b5       	in	r24, 0x24	; 36
  d2:	83 64       	ori	r24, 0x43	; 67
  d4:	84 bd       	out	0x24, r24	; 36
	// make sure to make OC0 pin (pin PB3 for atmega32) as output pin
	PORTC = 0b00000000;    // toggles the led
  d6:	18 b8       	out	0x08, r1	; 8
	DDRC |= (1 << 1);
  d8:	39 9a       	sbi	0x07, 1	; 7
//	TCCR2B = 0x81;
//	TCCR2B = (1 << FOC2) | (1 << CS20);
//	TCCR2A = (1 << WGM20) | (1 << WGM21) | (1 << COM;
//	TCCR2B = (1 << CS20)
}
  da:	08 95       	ret

000000dc <main>:
void main()
{
	uint8_t brightness;

	// initialize timer0 in PWM mode
	pwm_init();
  dc:	0e 94 68 00 	call	0xd0	; 0xd0 <pwm_init>

	// run forever
	while(1)
	{
		// increasing brightness
		for (brightness = 0; brightness < 255; ++brightness)
  e0:	80 e0       	ldi	r24, 0x00	; 0

		// decreasing brightness
		for (brightness = 255; brightness > 0; --brightness)
		{
			// set the brightness as duty cycle
			pwm_duty_cycle = brightness;
  e2:	e3 eb       	ldi	r30, 0xB3	; 179
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	08 c0       	rjmp	.+16     	; 0xf8 <main+0x1c>
	{
		// increasing brightness
		for (brightness = 0; brightness < 255; ++brightness)
		{
			// set the brightness as duty cycle
			pwm_duty_cycle = brightness;
  e8:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	af e4       	ldi	r26, 0x4F	; 79
  ec:	b3 ec       	ldi	r27, 0xC3	; 195
  ee:	11 97       	sbiw	r26, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <main+0x12>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x18>
  f4:	00 00       	nop

	// run forever
	while(1)
	{
		// increasing brightness
		for (brightness = 0; brightness < 255; ++brightness)
  f6:	8f 5f       	subi	r24, 0xFF	; 255
  f8:	8f 3f       	cpi	r24, 0xFF	; 255
  fa:	b1 f7       	brne	.-20     	; 0xe8 <main+0xc>

		// decreasing brightness
		for (brightness = 255; brightness > 0; --brightness)
		{
			// set the brightness as duty cycle
			pwm_duty_cycle = brightness;
  fc:	80 83       	st	Z, r24
  fe:	af e4       	ldi	r26, 0x4F	; 79
 100:	b3 ec       	ldi	r27, 0xC3	; 195
 102:	11 97       	sbiw	r26, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <main+0x26>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x2c>
 108:	00 00       	nop
			// delay so as to make the user "see" the change in brightness
			_delay_ms(10);
		}

		// decreasing brightness
		for (brightness = 255; brightness > 0; --brightness)
 10a:	81 50       	subi	r24, 0x01	; 1
 10c:	b9 f7       	brne	.-18     	; 0xfc <main+0x20>
 10e:	f4 cf       	rjmp	.-24     	; 0xf8 <main+0x1c>

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>
