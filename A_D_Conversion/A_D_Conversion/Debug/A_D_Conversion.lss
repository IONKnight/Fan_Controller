
A_D_Conversion.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000001d6  0000024a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  0000024c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000918  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  000009a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003be  00000000  00000000  00000a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000ee  00000000  00000000  00000dde  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b4  00000000  00000000  00000ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001180  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000fb  00000000  00000000  000011d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a7  00000000  00000000  000012cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  7c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  80:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  84:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  88:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ed       	ldi	r30, 0xD6	; 214
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	1b be       	out	0x3b, r1	; 59

000000b4 <__do_clear_bss>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	a0 30       	cpi	r26, 0x00	; 0
  c0:	b1 07       	cpc	r27, r17
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
  c4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <main>
  c8:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <_exit>

000000cc <__bad_interrupt>:
  cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <calibrate_temp>:
#define Temperature ADC
#define TEMPERATURE_MAX 25

uint16_t calibrate_temp(uint16_t c_temp)
{
	c_temp = c_temp*TEMPERATURE_MAX/1024;
  d0:	9c 01       	movw	r18, r24
  d2:	22 0f       	add	r18, r18
  d4:	33 1f       	adc	r19, r19
  d6:	28 0f       	add	r18, r24
  d8:	39 1f       	adc	r19, r25
  da:	22 0f       	add	r18, r18
  dc:	33 1f       	adc	r19, r19
  de:	22 0f       	add	r18, r18
  e0:	33 1f       	adc	r19, r19
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	82 0f       	add	r24, r18
  e8:	93 1f       	adc	r25, r19
	return(c_temp);
}
  ea:	89 2f       	mov	r24, r25
  ec:	86 95       	lsr	r24
  ee:	86 95       	lsr	r24
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	08 95       	ret

000000f4 <adc_init>:

// initialize adc
void adc_init()
{
	// AREF = AVcc
	ADMUX = (1<<REFS0)|(1<<REFS1);
  f4:	80 ec       	ldi	r24, 0xC0	; 192
  f6:	80 93 7c 00 	sts	0x007C, r24

	// ADC Enable and prescaler of 128
	// 20000000/128 = 156250
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  fa:	87 e8       	ldi	r24, 0x87	; 135
  fc:	80 93 7a 00 	sts	0x007A, r24
}
 100:	08 95       	ret

00000102 <adc_read>:

// read adc value
uint16_t adc_read(uint8_t pin)
{
	
	ADMUX |= (0<<MUX0)|(0<<MUX1)|(0<<MUX2)|(0<<MUX3)|(0<<MUX4);// clears the bottom 5 bits before ORing
 102:	ec e7       	ldi	r30, 0x7C	; 124
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	90 81       	ld	r25, Z
 108:	90 83       	st	Z, r25
	switch(pin)
 10a:	83 30       	cpi	r24, 0x03	; 3
 10c:	09 f1       	breq	.+66     	; 0x150 <adc_read+0x4e>
 10e:	84 30       	cpi	r24, 0x04	; 4
 110:	28 f4       	brcc	.+10     	; 0x11c <adc_read+0x1a>
 112:	81 30       	cpi	r24, 0x01	; 1
 114:	89 f0       	breq	.+34     	; 0x138 <adc_read+0x36>
 116:	82 30       	cpi	r24, 0x02	; 2
 118:	a8 f4       	brcc	.+42     	; 0x144 <adc_read+0x42>
 11a:	09 c0       	rjmp	.+18     	; 0x12e <adc_read+0x2c>
 11c:	85 30       	cpi	r24, 0x05	; 5
 11e:	21 f1       	breq	.+72     	; 0x168 <adc_read+0x66>
 120:	85 30       	cpi	r24, 0x05	; 5
 122:	e0 f0       	brcs	.+56     	; 0x15c <adc_read+0x5a>
 124:	86 30       	cpi	r24, 0x06	; 6
 126:	31 f1       	breq	.+76     	; 0x174 <adc_read+0x72>
 128:	87 30       	cpi	r24, 0x07	; 7
 12a:	79 f5       	brne	.+94     	; 0x18a <adc_read+0x88>
 12c:	29 c0       	rjmp	.+82     	; 0x180 <adc_read+0x7e>
	{
		case 0:
		ADMUX |= (0<<MUX0)|(0<<MUX1)|(0<<MUX2); 
 12e:	ec e7       	ldi	r30, 0x7C	; 124
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	80 83       	st	Z, r24
		break; 
 136:	29 c0       	rjmp	.+82     	; 0x18a <adc_read+0x88>
		case 1:
		ADMUX |= (1<<MUX0)|(0<<MUX1)|(0<<MUX2);
 138:	ec e7       	ldi	r30, 0x7C	; 124
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	81 60       	ori	r24, 0x01	; 1
 140:	80 83       	st	Z, r24
		break;
 142:	23 c0       	rjmp	.+70     	; 0x18a <adc_read+0x88>
		case 2:
		ADMUX |= (0<<MUX0)|(1<<MUX1)|(0<<MUX2);
 144:	ec e7       	ldi	r30, 0x7C	; 124
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	82 60       	ori	r24, 0x02	; 2
 14c:	80 83       	st	Z, r24
		break;
 14e:	1d c0       	rjmp	.+58     	; 0x18a <adc_read+0x88>
		case 3:
		ADMUX |= (1<<MUX0)|(1<<MUX1)|(0<<MUX2);
 150:	ec e7       	ldi	r30, 0x7C	; 124
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	83 60       	ori	r24, 0x03	; 3
 158:	80 83       	st	Z, r24
		break;
 15a:	17 c0       	rjmp	.+46     	; 0x18a <adc_read+0x88>
		case 4:
		ADMUX |= (0<<MUX0)|(0<<MUX1)|(1<<MUX2);
 15c:	ec e7       	ldi	r30, 0x7C	; 124
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	84 60       	ori	r24, 0x04	; 4
 164:	80 83       	st	Z, r24
		break;
 166:	11 c0       	rjmp	.+34     	; 0x18a <adc_read+0x88>
		case 5:
		ADMUX |= (1<<MUX0)|(0<<MUX1)|(1<<MUX2);
 168:	ec e7       	ldi	r30, 0x7C	; 124
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	85 60       	ori	r24, 0x05	; 5
 170:	80 83       	st	Z, r24
		break;
 172:	0b c0       	rjmp	.+22     	; 0x18a <adc_read+0x88>
		case 6:
		ADMUX |= (0<<MUX0)|(1<<MUX1)|(1<<MUX2);
 174:	ec e7       	ldi	r30, 0x7C	; 124
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	86 60       	ori	r24, 0x06	; 6
 17c:	80 83       	st	Z, r24
		break;
 17e:	05 c0       	rjmp	.+10     	; 0x18a <adc_read+0x88>
		case 7:
		ADMUX |= (1<<MUX0)|(1<<MUX1)|(1<<MUX2);
 180:	ec e7       	ldi	r30, 0x7C	; 124
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	87 60       	ori	r24, 0x07	; 7
 188:	80 83       	st	Z, r24
	}
	  

	// start single conversion
	// write '1' to ADSC
	ADCSRA |= (1<<ADSC);
 18a:	ea e7       	ldi	r30, 0x7A	; 122
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	80 64       	ori	r24, 0x40	; 64
 192:	80 83       	st	Z, r24

	// wait for conversion to complete
	// ADSC becomes '0' again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
 194:	80 81       	ld	r24, Z
 196:	86 fd       	sbrc	r24, 6
 198:	fd cf       	rjmp	.-6      	; 0x194 <adc_read+0x92>

	return (ADC);
 19a:	80 91 78 00 	lds	r24, 0x0078
 19e:	90 91 79 00 	lds	r25, 0x0079
	
}
 1a2:	08 95       	ret

000001a4 <main>:

int main()
{
	uint16_t adc_result0,adc_result;
	unsigned int c_temp;
	DDRC |= (1 << 0);           // to connect led to PC0
 1a4:	38 9a       	sbi	0x07, 0	; 7
	// initialize adc
	adc_init();
 1a6:	0e 94 7a 00 	call	0xf4	; 0xf4 <adc_init>
	


	while(1)
	{
		adc_result0 = adc_read(0);      // read adc value at PA0
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	0e 94 81 00 	call	0x102	; 0x102 <adc_read>
		//adc_result= calibrate_temp(adc_result0);
		c_temp = adc_result0*TEMPERATURE_MAX;
		// condition for led to glow
		if (adc_result0 > two_two_degree)
 1b0:	87 35       	cpi	r24, 0x57	; 87
 1b2:	91 05       	cpc	r25, r1
 1b4:	08 f0       	brcs	.+2      	; 0x1b8 <main+0x14>
		{
				PORTC |= (1<<PORTC0);
 1b6:	40 9a       	sbi	0x08, 0	; 8
				//_delay_ms(100);
		}
		
		if (adc_result0 > two_four_degree)
 1b8:	85 36       	cpi	r24, 0x65	; 101
 1ba:	91 05       	cpc	r25, r1
 1bc:	20 f0       	brcs	.+8      	; 0x1c6 <main+0x22>
		{
				PORTC |= (1<<PORTC0);
 1be:	40 9a       	sbi	0x08, 0	; 8
				//_delay_ms(100);
				PORTC |= (0<<PORTC0);
 1c0:	28 b1       	in	r18, 0x08	; 8
 1c2:	28 b9       	out	0x08, r18	; 8
				//_delay_ms(100);
				PORTC |= (1<<PORTC0);
 1c4:	40 9a       	sbi	0x08, 0	; 8
		}
		
		if (adc_result0 < two_one_degree)
 1c6:	82 35       	cpi	r24, 0x52	; 82
 1c8:	91 05       	cpc	r25, r1
 1ca:	78 f7       	brcc	.-34     	; 0x1aa <main+0x6>
		PORTC |= (0<<PORTC0);
 1cc:	88 b1       	in	r24, 0x08	; 8
 1ce:	88 b9       	out	0x08, r24	; 8
 1d0:	ec cf       	rjmp	.-40     	; 0x1aa <main+0x6>

000001d2 <_exit>:
 1d2:	f8 94       	cli

000001d4 <__stop_program>:
 1d4:	ff cf       	rjmp	.-2      	; 0x1d4 <__stop_program>
